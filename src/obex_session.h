/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -p obex_session.h:obex_session.cpp -i types.h ../xml/obex_session.xml
 *
 * qdbusxml2cpp is Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef OBEX_SESSION_H_1318014112
#define OBEX_SESSION_H_1318014112

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include "types.h"

/*
 * Proxy class for interface org.openobex.Session
 */
class OrgOpenobexSessionInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.openobex.Session"; }

public:
    OrgOpenobexSessionInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~OrgOpenobexSessionInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> Cancel()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("Cancel"), argumentList);
    }

    inline QDBusPendingReply<> ChangeCurrentFolder(const QString &path)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(path);
        return asyncCallWithArgumentList(QLatin1String("ChangeCurrentFolder"), argumentList);
    }

    inline QDBusPendingReply<> ChangeCurrentFolderBackward()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("ChangeCurrentFolderBackward"), argumentList);
    }

    inline QDBusPendingReply<> ChangeCurrentFolderToRoot()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("ChangeCurrentFolderToRoot"), argumentList);
    }

    inline QDBusPendingReply<> Close()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("Close"), argumentList);
    }

    inline QDBusPendingReply<> CopyRemoteFile(const QString &remote_filename, const QString &local_path)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(remote_filename) << qVariantFromValue(local_path);
        return asyncCallWithArgumentList(QLatin1String("CopyRemoteFile"), argumentList);
    }

    inline QDBusPendingReply<> CopyRemoteFileByType(const QString &type, const QString &local_path)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(type) << qVariantFromValue(local_path);
        return asyncCallWithArgumentList(QLatin1String("CopyRemoteFileByType"), argumentList);
    }

    inline QDBusPendingReply<> CreateFolder(const QString &folder_name)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(folder_name);
        return asyncCallWithArgumentList(QLatin1String("CreateFolder"), argumentList);
    }

    inline QDBusPendingReply<> DeleteRemoteFile(const QString &remote_filename)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(remote_filename);
        return asyncCallWithArgumentList(QLatin1String("DeleteRemoteFile"), argumentList);
    }

    inline QDBusPendingReply<> Disconnect()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("Disconnect"), argumentList);
    }

    inline QDBusPendingReply<QString> GetCapability()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("GetCapability"), argumentList);
    }

    inline QDBusPendingReply<QString> GetCurrentPath()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("GetCurrentPath"), argumentList);
    }

    inline QDBusPendingReply<ushort, ushort, QString> GetImageInfo(const QString &local_path)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(local_path);
        return asyncCallWithArgumentList(QLatin1String("GetImageInfo"), argumentList);
    }
    inline QDBusReply<ushort> GetImageInfo(const QString &local_path, ushort &height, QString &encoding)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(local_path);
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QLatin1String("GetImageInfo"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().count() == 3) {
            height = qdbus_cast<ushort>(reply.arguments().at(1));
            encoding = qdbus_cast<QString>(reply.arguments().at(2));
        }
        return reply;
    }

    inline QDBusPendingReply<QString> GetImagingCapabilities()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("GetImagingCapabilities"), argumentList);
    }

    inline QDBusPendingReply<QStringMap> GetTransferInfo()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("GetTransferInfo"), argumentList);
    }

    inline QDBusPendingReply<bool> IsBusy()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("IsBusy"), argumentList);
    }

    inline QDBusPendingReply<> PutImage(const QString &local_path)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(local_path);
        return asyncCallWithArgumentList(QLatin1String("PutImage"), argumentList);
    }

    inline QDBusPendingReply<> PutImageResized(const QString &local_path, ushort width, ushort height, const QString &encoding, const QString &transformation)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(local_path) << qVariantFromValue(width) << qVariantFromValue(height) << qVariantFromValue(encoding) << qVariantFromValue(transformation);
        return asyncCallWithArgumentList(QLatin1String("PutImageResized"), argumentList);
    }

    inline QDBusPendingReply<> PutLinkedAttachment(const QString &image_handle, const QString &local_path, const QString &content_type, const QString &charset)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(image_handle) << qVariantFromValue(local_path) << qVariantFromValue(content_type) << qVariantFromValue(charset);
        return asyncCallWithArgumentList(QLatin1String("PutLinkedAttachment"), argumentList);
    }

    inline QDBusPendingReply<> RemoteCopy(const QString &remote_source, const QString &remote_destination)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(remote_source) << qVariantFromValue(remote_destination);
        return asyncCallWithArgumentList(QLatin1String("RemoteCopy"), argumentList);
    }

    inline QDBusPendingReply<> RemoteDisplaySelectImage(const QString &image_handle)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(image_handle);
        return asyncCallWithArgumentList(QLatin1String("RemoteDisplaySelectImage"), argumentList);
    }

    inline QDBusPendingReply<> RemoteDisplayShowCurrentImage()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("RemoteDisplayShowCurrentImage"), argumentList);
    }

    inline QDBusPendingReply<> RemoteDisplayShowNextImage()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("RemoteDisplayShowNextImage"), argumentList);
    }

    inline QDBusPendingReply<> RemoteDisplayShowPreviousImage()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("RemoteDisplayShowPreviousImage"), argumentList);
    }

    inline QDBusPendingReply<> RemoteMove(const QString &remote_source, const QString &remote_destination)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(remote_source) << qVariantFromValue(remote_destination);
        return asyncCallWithArgumentList(QLatin1String("RemoteMove"), argumentList);
    }

    inline QDBusPendingReply<QString> RetrieveFolderListing()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("RetrieveFolderListing"), argumentList);
    }

    inline QDBusPendingReply<> SendFile(const QString &local_path)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(local_path);
        return asyncCallWithArgumentList(QLatin1String("SendFile"), argumentList);
    }

    inline QDBusPendingReply<> SendFileExt(const QString &local_path, const QString &remote_filename, const QString &type)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(local_path) << qVariantFromValue(remote_filename) << qVariantFromValue(type);
        return asyncCallWithArgumentList(QLatin1String("SendFileExt"), argumentList);
    }

    inline QDBusPendingReply<> SetTransferHints(const QString &fifo, const QString &remote_filename, const QString &type, qulonglong size, qlonglong mtime, qlonglong ctime)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(fifo) << qVariantFromValue(remote_filename) << qVariantFromValue(type) << qVariantFromValue(size) << qVariantFromValue(mtime) << qVariantFromValue(ctime);
        return asyncCallWithArgumentList(QLatin1String("SetTransferHints"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void Cancelled();
    void Closed();
    void Disconnected();
    void ErrorOccurred(const QString &in0, const QString &in1);
    void ImageHandleReceived(const QString &in0, bool in1);
    void TransferCompleted();
    void TransferProgress(qulonglong in0);
    void TransferStarted(const QString &in0, const QString &in1, qulonglong in2);
};

namespace org {
  namespace openobex {
    typedef ::OrgOpenobexSessionInterface Session;
  }
}
#endif
