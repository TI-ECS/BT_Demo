/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -p obex_manager.h:obex_manager.cpp -i types.h ../xml/obex_manager.xml
 *
 * qdbusxml2cpp is Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef OBEX_MANAGER_H_1317840166
#define OBEX_MANAGER_H_1317840166

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include "types.h"

/*
 * Proxy class for interface org.openobex.Manager
 */
class OrgOpenobexManagerInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.openobex.Manager"; }

public:
    OrgOpenobexManagerInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~OrgOpenobexManagerInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<bool> CancelSessionConnect(const QString &session_object)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(session_object);
        return asyncCallWithArgumentList(QLatin1String("CancelSessionConnect"), argumentList);
    }

    inline QDBusPendingReply<QDBusObjectPath> CreateBluetoothImagingSession(const QString &target_address, const QString &source_address, const QString &bip_feature)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(target_address) << qVariantFromValue(source_address) << qVariantFromValue(bip_feature);
        return asyncCallWithArgumentList(QLatin1String("CreateBluetoothImagingSession"), argumentList);
    }

    inline QDBusPendingReply<QDBusObjectPath> CreateBluetoothServer(const QString &source_address, const QString &pattern, bool require_pairing)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(source_address) << qVariantFromValue(pattern) << qVariantFromValue(require_pairing);
        return asyncCallWithArgumentList(QLatin1String("CreateBluetoothServer"), argumentList);
    }

    inline QDBusPendingReply<QDBusObjectPath> CreateBluetoothSession(const QString &target_address, const QString &source_address, const QString &pattern)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(target_address) << qVariantFromValue(source_address) << qVariantFromValue(pattern);
        return asyncCallWithArgumentList(QLatin1String("CreateBluetoothSession"), argumentList);
    }

    inline QDBusPendingReply<QDBusObjectPath> CreateTtyServer(const QString &tty_dev, const QString &pattern)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(tty_dev) << qVariantFromValue(pattern);
        return asyncCallWithArgumentList(QLatin1String("CreateTtyServer"), argumentList);
    }

    inline QDBusPendingReply<QDBusObjectPath> CreateTtySession(const QString &tty_dev, const QString &pattern)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(tty_dev) << qVariantFromValue(pattern);
        return asyncCallWithArgumentList(QLatin1String("CreateTtySession"), argumentList);
    }

    inline QDBusPendingReply<QDBusObjectPath> CreateUsbSession(uint interface_number, const QString &pattern)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(interface_number) << qVariantFromValue(pattern);
        return asyncCallWithArgumentList(QLatin1String("CreateUsbSession"), argumentList);
    }

    inline QDBusPendingReply<QStringMap> GetServerInfo(const QDBusObjectPath &server_object)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(server_object);
        return asyncCallWithArgumentList(QLatin1String("GetServerInfo"), argumentList);
    }

    inline QDBusPendingReply<QStringList> GetServerList()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("GetServerList"), argumentList);
    }

    inline QDBusPendingReply<QStringMap> GetSessionInfo(const QDBusObjectPath &session_object)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(session_object);
        return asyncCallWithArgumentList(QLatin1String("GetSessionInfo"), argumentList);
    }

    inline QDBusPendingReply<QStringList> GetSessionList()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("GetSessionList"), argumentList);
    }

    inline QDBusPendingReply<QStringMap> GetUsbInterfaceInfo(uint interface_number)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(interface_number);
        return asyncCallWithArgumentList(QLatin1String("GetUsbInterfaceInfo"), argumentList);
    }

    inline QDBusPendingReply<uint> GetUsbInterfacesNum()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("GetUsbInterfacesNum"), argumentList);
    }

    inline QDBusPendingReply<QString> GetVersion()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("GetVersion"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void SessionClosed(const QDBusObjectPath &in0);
    void SessionConnectError(const QDBusObjectPath &in0, const QString &in1, const QString &in2);
    void SessionConnected(const QDBusObjectPath &in0);
};

namespace org {
  namespace openobex {
    typedef ::OrgOpenobexManagerInterface Manager;
  }
}
#endif
